name: Update Strava Heatmap

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  workflow_dispatch:  # Allow manual triggering

jobs:
  update-heatmap:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Build Strava Heatmap
        run: |
          go build -o strava-heatmap ./cmd/strava-heatmap

      - name: Generate Heatmap SVG
        env:
          STRAVA_CLIENT_ID: ${{ secrets.STRAVA_CLIENT_ID }}
          STRAVA_CLIENT_SECRET: ${{ secrets.STRAVA_CLIENT_SECRET }}
          STRAVA_REFRESH_TOKEN: ${{ secrets.STRAVA_REFRESH_TOKEN }}
        run: |
          # Enable debug mode
          cp config.json config.json.backup
          sed -i 's/"debug": false/"debug": true/g' config.json
          cat config.json
          
          # Run test command to verify credentials
          ./strava-heatmap -test
          
          # Try to generate SVG with error output
          # Use script to ensure clean capture of output
          echo "Generating SVG with -generate flag..."
          ./strava-heatmap -generate > svg_output.tmp 2>generate_error.log || { 
            echo "Error generating SVG file:"
            cat generate_error.log
            exit 1
          }
          
          # Ensure file starts with an SVG tag (trim any leading output)
          echo "Cleaning SVG output..."
          if grep -q "<svg" svg_output.tmp; then
            # Extract everything from the first <svg tag to the end of file
            sed -n '/<svg/,$p' svg_output.tmp > strava-heatmap.svg
          else
            echo "ERROR: No SVG tag found in the generated output!"
            head -n 20 svg_output.tmp
            cat generate_error.log
            exit 1
          fi
          
          # Restore original config
          mv config.json.backup config.json
          
          echo "Generated SVG file:"
          ls -la strava-heatmap.svg
          # Show first few lines to verify it starts with SVG tag
          head -n 5 strava-heatmap.svg
      
      - name: Checkout profile repository
        uses: actions/checkout@v3
        with:
          repository: leesamuel423/leesamuel423
          path: profile
          token: ${{ secrets.PAT }}
      
      - name: Install necessary packages
        run: |
          sudo apt-get update
          sudo apt-get install -y librsvg2-bin imagemagick

      - name: Validate and fix SVG file
        run: |
          # Use the generated SVG file
          SVG_FILE="strava-heatmap.svg"
          FIXED_SVG_FILE="strava-heatmap-fixed.svg"
          PNG_FILE="strava-heatmap.png"
          
          if [ ! -f "$SVG_FILE" ]; then
            echo "ERROR: SVG file not found at $SVG_FILE"
            exit 1
          fi
          
          echo "Examining SVG file: $SVG_FILE"
          # Check file size and show first few bytes (as hex)
          ls -la "$SVG_FILE"
          hexdump -n 32 -C "$SVG_FILE"
          
          # Display first few lines of the file
          echo "First 10 lines of SVG file:"
          head -n 10 "$SVG_FILE"
          
          # Check if file starts with expected XML tag
          if ! grep -q "^<svg" "$SVG_FILE"; then
            echo "SVG file doesn't start with <svg> tag. Attempting to fix..."
            
            # Find and extract the SVG content, including XML header if needed
            if grep -q "<svg" "$SVG_FILE"; then
              # Extract everything from the first <svg tag to the end of file
              echo "Extracting SVG content from file..."
              sed -n '/<svg/,$p' "$SVG_FILE" > "$FIXED_SVG_FILE"
            else
              echo "ERROR: No SVG tag found in the file!"
              cat "$SVG_FILE"
              exit 1
            fi
          else
            # File already starts with <svg>, just copy it
            cp "$SVG_FILE" "$FIXED_SVG_FILE"
          fi
          
          echo "Validation complete. Fixed SVG file:"
          ls -la "$FIXED_SVG_FILE"
          head -n 5 "$FIXED_SVG_FILE"

      - name: Convert SVG to PNG
        run: |
          # Use the fixed SVG file
          FIXED_SVG_FILE="strava-heatmap-fixed.svg"
          PNG_FILE="strava-heatmap.png"
          
          # Final check before conversion
          if ! grep -q "<svg" "$FIXED_SVG_FILE"; then
            echo "ERROR: Fixed file still does not appear to contain valid SVG content"
            head -n 20 "$FIXED_SVG_FILE"
            exit 1
          fi
          
          # Convert SVG to PNG
          echo "Converting fixed SVG to PNG..."
          rsvg-convert -o "$PNG_FILE" "$FIXED_SVG_FILE"
          
          if [ ! -f "$PNG_FILE" ]; then
            echo "ERROR: PNG file was not created"
            exit 1
          fi
          
          echo "Successfully created PNG file:"
          ls -la "$PNG_FILE"

      - name: Update README in profile repository
        run: |
          # Use the generated PNG file
          PNG_FILE="strava-heatmap.png"
          
          # Check if the profile README has the markers
          if ! grep -q "<!-- STRAVA-HEATMAP-START -->" profile/README.md || ! grep -q "<!-- STRAVA-HEATMAP-END -->" profile/README.md; then
            echo "ERROR: Markers not found in profile README.md. Please add them first."
            echo "Add these lines to your profile README:"
            echo "<!-- STRAVA-HEATMAP-START -->"
            echo "<!-- STRAVA-HEATMAP-END -->"
            exit 1
          fi
          
          # Copy PNG file to profile repo assets directory
          mkdir -p profile/assets
          cp "$PNG_FILE" profile/assets/
          
          # Create a temporary file
          TEMP_FILE=$(mktemp)
          
          # Process the README file in three parts: before markers, image tag, after markers
          awk 'BEGIN{p=1}/<!-- STRAVA-HEATMAP-START -->/{print;p=0}p' profile/README.md > $TEMP_FILE
          echo "" >> $TEMP_FILE
          echo "![Strava Activity Heatmap](./assets/strava-heatmap.png)" >> $TEMP_FILE
          echo "" >> $TEMP_FILE
          awk 'BEGIN{p=0}/<!-- STRAVA-HEATMAP-END -->/{p=1}p' profile/README.md >> $TEMP_FILE
          
          # Replace the original README with our modified version
          cp $TEMP_FILE profile/README.md
          
          # Commit and push the changes
          cd profile
          git config user.name "GitHub Actions"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Add debug output
          echo "Checking for changes in README and image:"
          git status
          
          # Check if the image is different from what's already there
          if [ -f "assets/strava-heatmap.png" ]; then
            echo "Comparing new and existing image files:"
            # Skip the binary comparison and always update
            # This ensures the workflow succeeds even if images look identical
            echo "Updating heatmap image regardless of content similarity"
          else
            echo "No existing image found - this is a first-time setup"
          fi
          
          # Stage the files
          git add README.md assets/strava-heatmap.png
          
          # Force commit even if the content appears the same
          # We do this because even slight changes in the heatmap might not be detected by git
          echo "Committing and pushing changes..."
          git commit -m "Update Strava activity heatmap [skip ci]" || true
          
          # Only push if there was something to commit
          if [ "$(git rev-parse HEAD)" != "$(git rev-parse @{u})" ]; then
            echo "Changes committed, pushing to remote..."
            git push
          else
            echo "No changes to push. Repository is already up to date."
          fi
